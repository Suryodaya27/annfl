# load the iris dataset
from sklearn.datasets import load_iris
iris = load_iris()
 
# store the feature matrix (X) and response vector (y)
X = iris.data
y = iris.target
 
# splitting X and y into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)
 
# training the model on training set
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train, y_train)
 
# making predictions on the testing set
y_pred = gnb.predict(X_test)
 
# comparing actual response values (y_test) with predicted response values (y_pred)
from sklearn import metrics
print("Gaussian Naive Bayes model accuracy(in %):", metrics.accuracy_score(y_test, y_pred)*100)


 









X_train = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])
y_train =  [0, 0, 0, 1, 1, 1]
# Building the classifier
from sklearn import svm
# Initialize SVM classifier
clf = svm.SVC(kernel='linear')
clf = clf.fit(X_train, y_train)
predictions = clf.predict(X_train)
print(predictions)
 
predictions = clf.predict([[-4,2]])
print(predictions)
 
support_vectors = clf.support_vectors_
print(support_vectors)
 
from  sklearn.metrics import classification_report, confusion_matrix
predictions = clf.predict(X_train)
cm = confusion_matrix(y_train, predictions)
print(cm)

 















import matplotlib.pyplot as plt

x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]
y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]

plt.scatter(x, y)
plt.show()
 
from sklearn.cluster import KMeans
data = list(zip(x, y))
kmeans = KMeans(n_clusters=3)
kmeans.fit(data)

plt.scatter(x, y, c=kmeans.labels_)
plt.show()
 
